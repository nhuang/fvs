@model IEnumerable<FestivalScheduler.Models.Resouces.AttendeeViewModel>
@{
    ViewBag.Title = "Index";
}

@{
    DateTime startDate = ViewBag.StartDate;
    DateTime timeStart = ViewBag.timeStart;
    DateTime timeEnd = ViewBag.timeEnd;
}

<h2>Attendee Horizontal Grouping</h2>
@using (Html.BeginForm("HAttendeeFilter", "Scheduler", FormMethod.Post))
{
    <p>
        @(Html.Kendo().TimePicker()
        .Name("timeStart")
        .Format("HH:mm")
            .Value(timeStart.Hour.ToString())
        )
        <label for="end" style="margin-left:3em">End time:</label>
        @(Html.Kendo().TimePicker()
        .Name("timeEnd")
        .Format("HH:mm")
             .Value(timeEnd.Hour.ToString())
        )
    </p>
    foreach (var item in Model)
    {
        <input type="checkbox" name="attendee" value="@item.Value" checked="@item.Show"><label style="background-color:@item.Color;text-align: center;">@item.Text</label>
    }
    <input type="submit" value="Filter" />
}
<hr />
@(Html.Kendo().Scheduler<FestivalScheduler.Models.MeetingViewModel>()
    .Name("scheduler")
    .Date(@startDate)
        .StartTime(@timeStart)
        .EndTime(@timeEnd)
        .Width(1080)
        .MajorTick(60)
        .MinorTickCount(4)
    .Views(views =>
    {
        views.DayView();
        views.WeekView(view => view.Selected(true));
        views.MonthView();
    })
    .Timezone("Etc/UTC")
        .Group(group => group.Resources("Attendees"))
    .Resources(resource =>
         {
             resource.Add(m => m.RoomID)
                 .Title("Room")
                 .Name("Rooms")
                 .DataTextField("Text")
                 .DataValueField("Value")
                 .DataColorField("Color")
                 .DataSource(ds => ds.Read(read => read.Action("Room_Read", "Room"))
               );
             resource.Add(m => m.Attendees)
                 .Title("Attendees")
                 .Multiple(true)
                 .DataTextField("Text")
                 .DataValueField("Value")
                 .DataColorField("Color")
                 .DataSource(ds => ds.Read(read => read.Action("Attendee_Selected", "Attendee"))
               );
         })
    .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.MeetingID);
                m.Field(f => f.Title).DefaultValue("No title");
                m.RecurrenceId(f => f.RecurrenceID);
                m.Field(f => f.Title).DefaultValue("No title");
            })
            .Read("Grouping_Horizontal_Read", "Scheduler")
            .Create("Grouping_Horizontal_Create", "Scheduler")
            .Destroy("Grouping_Horizontal_Destroy", "Scheduler")
            .Update("Grouping_Horizontal_Update", "Scheduler")

        ).EventTemplate(
                        "<div class='view-template'>" +
                                "#= kendo.toString(start, 'hh:mm') # - #= kendo.toString(end, 'hh:mm') #" +
                            "<br/>" +
                            "#= title #<br/>" +
                            "#= description #" +
                        "</div>")
        .Events(events => events
            .Add("scheduler_add")
            .Save("scheduler_save")
            .Resize("scheduler_resize")
            .ResizeEnd("scheduler_resizeEnd")
            .Move("scheduler_move")
            .MoveEnd("scheduler_moveEnd")
        )
)



<script>
    function scheduler_resize(e) {
        if (roomIsOccupied(e.start, e.end, e.event, e.resources) || attendeeIsOccupied(e.start, e.end, e.event, e.resources)) {
            this.wrapper.find(".k-marquee-color").addClass("invalid-slot");
            e.preventDefault();
        }
    }

    function scheduler_resizeEnd(e) {
        if (!checkAvailability(e.start, e.end, e.events)) {
            e.preventDefault();
        }
    }

    function scheduler_move(e) {
        if (roomIsOccupied(e.start, e.end, e.event, e.resources) || attendeeIsOccupied(e.start, e.end, e.event, e.resources)) {
            this.wrapper.find(".k-event-drag-hint").addClass("invalid-slot");
        }
    }

    function scheduler_moveEnd(e) {
        if (!checkAvailability(e.start, e.end, e.event, e.resources)) {
            e.preventDefault();
        }
    }

    function scheduler_add(e) {
        if (!checkAvailability(e.event.start, e.event.end, e.event)) {
            e.preventDefault();
        }
    }

    function scheduler_save(e) {
        if (!checkAvailability(e.event.start, e.event.end, e.event)) {
            e.preventDefault();
        }
    }

    function occurrencesInRangeByResource(start, end, resourceFieldName, event, resources) {
        var scheduler = $("#scheduler").getKendoScheduler();

        var occurrences = scheduler.occurrencesInRange(start, end);

        var idx = occurrences.indexOf(event);
        if (idx > -1) {
            occurrences.splice(idx, 1);
        }

        event = $.extend({}, event, resources);

        return filterByResource(occurrences, resourceFieldName, event[resourceFieldName]);
    }

    function filterByResource(occurrences, resourceFieldName, value) {
        var result = [];
        var occurrence;

        for (var idx = 0, length = occurrences.length; idx < length; idx++) {
            occurrence = occurrences[idx];
            var resourceValue = occurrence[resourceFieldName];

            if (resourceValue === value) {
                result.push(occurrence);
            } else if (resourceValue instanceof kendo.data.ObservableArray) {
                if (value) {
                    for (var i = 0; i < value.length; i++) {
                        if (resourceValue.indexOf(value[i]) != -1) {
                            result.push(occurrence);
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }

    function attendeeIsOccupied(start, end, event, resources) {
        var occurrences = occurrencesInRangeByResource(start, end, "Attendees", event, resources);
        if (occurrences.length > 0) {
            return true;
        }
        return false;
    }

    function roomIsOccupied(start, end, event, resources) {
        var occurrences = occurrencesInRangeByResource(start, end, "RoomID", event, resources);
        if (occurrences.length > 0) {
            return true;
        }
        return false;
    }

    function checkAvailability(start, end, event, resources) {
        if (attendeeIsOccupied(start, end, event, resources)) {
            setTimeout(function () {
                alert("This person is not available in this time period.");
            }, 0);

            return false;
        }

        if (roomIsOccupied(start, end, event, resources)) {
            setTimeout(function () {
                alert("This room is not available in this time period.");
            }, 0);

            return false;
        }

        return true;
    }

</script>