@model IEnumerable<FestivalScheduler.Models.Resouces.RoomViewModel>
@{
    ViewBag.Title = "Index";
}
@{
    DateTime startDate = ViewBag.StartDate;
    DateTime timeStart = ViewBag.timeStart;
    DateTime timeEnd = ViewBag.timeEnd;
}
<h2>Rooms Vertical Grouping</h2>
@using (Html.BeginForm("VRoomFilter", "Scheduler", FormMethod.Post))
{
    <p>
    @(Html.Kendo().TimePicker()
        .Name("timeStart")
        .Format("HH:mm")
            .Value(timeStart.Hour.ToString())
    )
    <label for="end" style="margin-left:3em">End time:</label>
    @(Html.Kendo().TimePicker()
        .Name("timeEnd")
        .Format("HH:mm")
             .Value(timeEnd.Hour.ToString())
    )
    </p>
    foreach (var item in Model)
    {
        <input type="checkbox" name="room" value="@item.Value" checked="@item.Show"><label style="width:100px;background-color:@item.Color;text-align: center;">@item.Text</label>
    }
    <input type="submit" value="Filter" />
}
<hr />
@(Html.Kendo().Scheduler<FestivalScheduler.Models.MeetingViewModel>()
    .Name("scheduler")
        .Date(@startDate)
    .StartTime(@timeStart)
    .EndTime(@timeEnd)
    .Views(views =>
    {
        views.DayView();
        views.WeekView(view => view.Selected(true));
        views.MonthView();
    })
        .Timezone("Etc/UTC")
            .MajorTick(60)
            .MinorTickCount(4)
    .Group(group => group.Resources("Rooms").Orientation(SchedulerGroupOrientation.Vertical))
         .Resources(resource =>
         {
             resource.Add(m => m.Attendees)
                .Title("Attendees")
                .Multiple(true)
                .DataTextField("Text")
                .DataValueField("Value")
                .DataColorField("Color")
                .DataSource(ds => ds.Read(read => read.Action("Attendee_Read", "Attendee"))
              );
                 
                 resource.Add(m => m.RoomID)
                     .Title("Room")
                     .Name("Rooms")
                     .DataTextField("Text")
                     .DataValueField("Value")
                     .DataColorField("Color")
                     .DataSource(ds => ds.Read(read => read.Action("Room_Selected", "Room"))
                   );
                
             })
    .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.MeetingID);
                m.Field(f => f.Title).DefaultValue("No title");
                m.RecurrenceId(f => f.RecurrenceID);
                m.Field(f => f.Title).DefaultValue("No title");
            })
                 .Read("Grouping_Horizontal_Read", "Scheduler")
                    .Create("Grouping_Horizontal_Create", "Scheduler")
                    .Destroy("Grouping_Horizontal_Destroy", "Scheduler")
                    .Update("Grouping_Horizontal_Update", "Scheduler")
        ).EventTemplate(
                        "<div class='view-template'>" +
                                "#= kendo.toString(start, 'hh:mm') # - #= kendo.toString(end, 'hh:mm') #" +
                            "<br/>" +
                            "#= title #<br/>" +
                            "#= description #" +
                        "</div>")
)