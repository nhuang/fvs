@model IEnumerable<FestivalScheduler.Models.Resouces.RoomViewModel>
@{
    ViewBag.Title = "Index";
    int StartHour = ViewBag.StartHour;
    int StartMinute = ViewBag.StartMinute;
    int EndHour = ViewBag.EndHour;
    int EndMinute = ViewBag.EndMinute;
    DateTime StartDate = ViewBag.StartDate;
    DateTime EndDate = ViewBag.EndDate;
}

<h2>Rooms Vertical Grouping</h2>
@using (Html.BeginForm("VOutdoorRoomFilter", "Scheduler", FormMethod.Post))
{
    @(Html.Kendo().DropDownList()
                          .Name("Venue")
                      .DataTextField("Text")
                      .DataValueField("Value")
                      .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("Room_OutdoorRead", "Room"); //Set the Action and Controller name
                            })
                            .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                        })
                      .SelectedIndex(0)
                      .HtmlAttributes(new { style = "width:" + 250 + "px" })
    )

    <input type="submit" value="Select" />
}
<hr />
@(Html.Kendo().Scheduler<FestivalScheduler.Models.MeetingViewModel>()
    .Name("scheduler")
         .Date(@StartDate)
        .StartTime(@StartHour, @StartMinute, 0)
            .EndTime(@EndHour, @EndMinute, 59)
    .Views(views =>
    {
        views.DayView();
        views.WeekView();
        views.CustomView("CustomView", view => view.Selected(true));
    })
        .Timezone("Etc/UTC")
            .MajorTick(60)
            .MinorTickCount(4)
    .Group(group => group.Resources("Rooms").Orientation(SchedulerGroupOrientation.Vertical))
         .Resources(resource =>
             {
                 resource.Add(m => m.Attendees)
                     .Title("Attendees")
                     .Multiple(true)
                     .DataTextField("Text")
                     .DataValueField("Value")
                     .DataColorField("Color")
                     .DataSource(ds => ds.Read(read => read.Action("Attendee_OutdoorSelected", "Attendee"))
                   );

                 resource.Add(m => m.RoomID)
                     .Title("Room")
                     .Name("Rooms")
                     .DataTextField("Text")
                     .DataValueField("Value")
                     .DataColorField("Color")
                     .DataSource(ds => ds.Read(read => read.Action("Room_OutdoorRead", "Room"))
                   );

             })
        .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.MeetingID);
                m.Field(f => f.Title).DefaultValue("No title");
                m.RecurrenceId(f => f.RecurrenceID);
                m.Field(f => f.Title).DefaultValue("No title");
            })
                .Read("Indoor_Horizontal_Read", "Scheduler")
                .Create("Indoor_Horizontal_Create", "Scheduler")
                .Destroy("Indoor_Horizontal_Destroy", "Scheduler")
                .Update("Indoor_Horizontal_Update", "Scheduler")
        )
        .EventTemplate(
                        "<div class='view-template' style>" +
                                "#= kendo.toString(start, 'hh:mm') # - #= kendo.toString(end, 'hh:mm') #" +
                            "<br/>" +
                            "#= title #<br/>" +
                            "#= description #" +
                        "</div>")
        .Events(events => events
            .Add("scheduler_add")
            .Save("scheduler_save")
            .Resize("scheduler_resize")
            .ResizeEnd("scheduler_resizeEnd")
            .Move("scheduler_move")
            .MoveEnd("scheduler_moveEnd")
        )
)




<script>
    function scheduler_resize(e) {
        if (roomIsOccupied(e.start, e.end, e.event, e.resources) || attendeeIsOccupied(e.start, e.end, e.event, e.resources)) {
            this.wrapper.find(".k-marquee-color").addClass("invalid-slot");
            e.preventDefault();
        }
    }

    function scheduler_resizeEnd(e) {
        if (!checkAvailability(e.start, e.end, e.events)) {
            e.preventDefault();
        }
    }

    function scheduler_move(e) {
        if (roomIsOccupied(e.start, e.end, e.event, e.resources) || attendeeIsOccupied(e.start, e.end, e.event, e.resources)) {
            this.wrapper.find(".k-event-drag-hint").addClass("invalid-slot");
        }
    }

    function scheduler_moveEnd(e) {
        if (!checkAvailability(e.start, e.end, e.event, e.resources)) {
            e.preventDefault();
        }
    }

    function scheduler_add(e) {
        if (!checkAvailability(e.event.start, e.event.end, e.event)) {
            e.preventDefault();
        }
    }

    function scheduler_save(e) {
        if (!checkAvailability(e.event.start, e.event.end, e.event)) {
            e.preventDefault();
        }
    }

    function occurrencesInRangeByResource(start, end, resourceFieldName, event, resources) {
        var scheduler = $("#scheduler").getKendoScheduler();

        var occurrences = scheduler.occurrencesInRange(start, end);

        var idx = occurrences.indexOf(event);
        if (idx > -1) {
            occurrences.splice(idx, 1);
        }

        event = $.extend({}, event, resources);

        return filterByResource(occurrences, resourceFieldName, event[resourceFieldName]);
    }

    function filterByResource(occurrences, resourceFieldName, value) {
        var result = [];
        var occurrence;

        for (var idx = 0, length = occurrences.length; idx < length; idx++) {
            occurrence = occurrences[idx];
            var resourceValue = occurrence[resourceFieldName];

            if (resourceValue === value) {
                result.push(occurrence);
            } else if (resourceValue instanceof kendo.data.ObservableArray) {
                if (value) {
                    for (var i = 0; i < value.length; i++) {
                        if (resourceValue.indexOf(value[i]) != -1) {
                            result.push(occurrence);
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }

    function attendeeIsOccupied(start, end, event, resources) {
        var occurrences = occurrencesInRangeByResource(start, end, "Attendees", event, resources);
        if (occurrences.length > 0) {
            return true;
        }
        return false;
    }

    function roomIsOccupied(start, end, event, resources) {
        var occurrences = occurrencesInRangeByResource(start, end, "RoomID", event, resources);
        if (occurrences.length > 0) {
            return true;
        }
        return false;
    }

    function checkAvailability(start, end, event, resources) {
        if (attendeeIsOccupied(start, end, event, resources)) {
            setTimeout(function () {
                alert("This person is not available in this time period.");
            }, 0);

            return false;
        }

        if (roomIsOccupied(start, end, event, resources)) {
            setTimeout(function () {
                alert("This room is not available in this time period.");
            }, 0);

            return false;
        }

        return true;
    }

    var CustomView = kendo.ui.MultiDayView.extend({
        options: {
            selectedDateFormat: "{0:D} - {1:D}"
        },
        name: "customView",
        calculateDateRange: function () {
            //create a range of dates to be shown within the view

            var selectedDate = this.options.date,
                start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),
                idx, length,
                dates = [];

            for (idx = 0, length = 14; idx < length; idx++) {
                dates.push(start);
                start = kendo.date.nextDay(start);
            }

            this._render(dates);
        }

    });
</script>